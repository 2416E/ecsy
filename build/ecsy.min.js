!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):(e=e||self,function(){var n=e.ECSY,s=e.ECSY={};t(s),s.noConflict=function(){return e.ECSY=n,s}}())}(this,(function(e){"use strict";class t{constructor(e){this._systems=[],this._executeSystems=[],this.world=e}registerSystem(e,t){var n=new e(this.world,t);return n.init&&n.init(),n.order=this._systems.length,this._systems.push(n),n.execute&&this._executeSystems.push(n),this.sortSystems(),this}sortSystems(){this._executeSystems.sort((e,t)=>e.priority-t.priority||e.order-t.order)}getSystem(e){return this._systems.find(t=>t instanceof e)}getSystems(){return this._systems}removeSystem(e){var t=this._systems.indexOf(e);~t&&this._systems.splice(t,1)}execute(e,t){this._executeSystems.forEach(n=>{if(n.enabled&&n.initialized){if(n.canExecute()){let s=performance.now();n.execute(e,t),n.executeTime=performance.now()-s}n.clearEvents()}})}stats(){for(var e={numSystems:this._systems.length,systems:{}},t=0;t<this._systems.length;t++){var n=this._systems[t],s=e.systems[n.constructor.name]={queries:{}};for(var o in n.ctx)s.queries[o]=n.ctx[o].stats()}return e}}class n{constructor(){this._listeners={},this.stats={fired:0,handled:0}}addEventListener(e,t){let n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){return void 0!==this._listeners[e]&&-1!==this._listeners[e].indexOf(t)}removeEventListener(e,t){var n=this._listeners[e];if(void 0!==n){var s=n.indexOf(t);-1!==s&&n.splice(s,1)}}dispatchEvent(e,t,n){this.stats.fired++;var s=this._listeners[e];if(void 0!==s)for(var o=s.slice(0),i=0;i<o.length;i++)o[i].call(this,t,n)}resetCounters(){this.stats.fired=this.stats.handled=0}}function s(e){return e.name}function o(e){var t=s(e);return t.charAt(0).toLowerCase()+t.slice(1)}function i(e){for(var t=[],n=0;n<e.length;n++){var o=e[n];if("object"==typeof o){var i="not"===o.operator?"!":o.operator;t.push(i+s(o.Component))}else t.push(s(o))}return t.map((function(e){return e.toLowerCase()})).sort().join("-")}class r{constructor(e,t){if(this.Components=[],this.NotComponents=[],e.forEach(e=>{"object"==typeof e?this.NotComponents.push(e.Component):this.Components.push(e)}),0===this.Components.length)throw new Error("Can't create a query without components");this.entities=[],this.eventDispatcher=new n,this.reactive=!1,this.key=i(e);for(var s=0;s<t._entities.length;s++){var o=t._entities[s];this.match(o)&&(o.queries.push(this),this.entities.push(o))}}addEntity(e){e.queries.push(this),this.entities.push(e),this.eventDispatcher.dispatchEvent(r.prototype.ENTITY_ADDED,e)}removeEntity(e){let t=this.entities.indexOf(e);~t&&(this.entities.splice(t,1),t=e.queries.indexOf(this),e.queries.splice(t,1),this.eventDispatcher.dispatchEvent(r.prototype.ENTITY_REMOVED,e))}match(e){return e.hasAllComponents(this.Components)&&!e.hasAnyComponents(this.NotComponents)}stats(){return{numComponents:this.Components.length,numEntities:this.entities.length}}}r.prototype.ENTITY_ADDED="Query#ENTITY_ADDED",r.prototype.ENTITY_REMOVED="Query#ENTITY_REMOVED",r.prototype.COMPONENT_CHANGED="Query#COMPONENT_CHANGED";var a=0;class h{constructor(e){this._world=e||null,this.id=a++,this._ComponentTypes=[],this._components={},this._componentsToRemove={},this.queries=[],this._ComponentTypesToRemove=[],this.alive=!1}getComponent(e){return this._components[e.name]}getRemovedComponent(e){return this._componentsToRemove[e.name]}getComponents(){return this._components}getComponentsToRemove(){return this._componentsToRemove}getComponentTypes(){return this._ComponentTypes}getMutableComponent(e){for(var t=this._components[e.name],n=0;n<this.queries.length;n++){var s=this.queries[n];s.reactive&&-1!==s.Components.indexOf(e)&&s.eventDispatcher.dispatchEvent(r.prototype.COMPONENT_CHANGED,this,t)}return t}addComponent(e,t){return this._world.entityAddComponent(this,e,t),this}removeComponent(e,t){return this._world.entityRemoveComponent(this,e,t),this}hasComponent(e){return!!~this._ComponentTypes.indexOf(e)}hasRemovedComponent(e){return!!~this._ComponentTypesToRemove.indexOf(e)}hasAllComponents(e){for(var t=0;t<e.length;t++)if(!this.hasComponent(e[t]))return!1;return!0}hasAnyComponents(e){for(var t=0;t<e.length;t++)if(this.hasComponent(e[t]))return!0;return!1}removeAllComponents(e){return this._world.entityRemoveAllComponents(this,e)}reset(){this.id=a++,this._world=null,this._ComponentTypes.length=0,this.queries.length=0,this._components={}}remove(e){return this._world.removeEntity(this,e)}}class p{constructor(e,t){this.freeList=[],this.count=0,this.T=e;var n=null;arguments.length>1&&(n=Array.prototype.slice.call(arguments)).shift(),this.createElement=n?()=>new e(...n):()=>new e,void 0!==t&&this.expand(t)}aquire(){return this.freeList.length<=0&&this.expand(Math.round(.2*this.count)+1),this.freeList.pop()}release(e){e.reset(),this.freeList.push(e)}expand(e){for(var t=0;t<e;t++)this.freeList.push(this.createElement());this.count+=e}totalSize(){return this.count}totalFree(){return this.freeList.length}totalUsed(){return this.count-this.freeList.length}}class m{constructor(e){this._world=e,this._queries={}}onEntityRemoved(e){for(var t in this._queries){var n=this._queries[t];-1!==e.queries.indexOf(n)&&n.removeEntity(e)}}onEntityComponentAdded(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&~s.entities.indexOf(e)?s.removeEntity(e):~s.Components.indexOf(t)&&s.match(e)&&!~s.entities.indexOf(e)&&s.addEntity(e)}}onEntityComponentRemoved(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&!~s.entities.indexOf(e)&&s.match(e)?s.addEntity(e):~s.Components.indexOf(t)&&~s.entities.indexOf(e)&&!s.match(e)&&s.removeEntity(e)}}getQuery(e){var t=i(e),n=this._queries[t];return n||(this._queries[t]=n=new r(e,this._world)),n}stats(){var e={};for(var t in this._queries)e[t]=this._queries[t].stats();return e}}class l{}class c{constructor(e){this.world=e,this.componentsManager=e.componentsManager,this._entities=[],this._queryManager=new m(this),this.eventDispatcher=new n,this._entityPool=new p(h),this.entitiesWithComponentsToRemove=[],this.entitiesToRemove=[],this.numStateComponents=0}createEntity(){var e=this._entityPool.aquire();return e.alive=!0,e._world=this,this._entities.push(e),this.eventDispatcher.dispatchEvent(u,e),e}entityAddComponent(e,t,n){if(!~e._ComponentTypes.indexOf(t)){e._ComponentTypes.push(t),t.__proto__===l&&this.numStateComponents++;var s=this.world.componentsManager.getComponentsPool(t).aquire();if(e._components[t.name]=s,n)if(s.copy)s.copy(n);else for(var o in n)s[o]=n[o];this._queryManager.onEntityComponentAdded(e,t),this.world.componentsManager.componentAddedToEntity(t),this.eventDispatcher.dispatchEvent(d,e,t)}}entityRemoveComponent(e,t,n){var o=e._ComponentTypes.indexOf(t);if(~o){if(this.eventDispatcher.dispatchEvent(v,e,t),n)this._entityRemoveComponentSync(e,t,o);else{0===e._ComponentTypesToRemove.length&&this.entitiesWithComponentsToRemove.push(e),e._ComponentTypes.splice(o,1),e._ComponentTypesToRemove.push(t);var i=s(t);e._componentsToRemove[i]=e._components[i],delete e._components[i]}this._queryManager.onEntityComponentRemoved(e,t),t.__proto__===l&&(this.numStateComponents--,0!==this.numStateComponents||e.alive||e.remove())}}_entityRemoveComponentSync(e,t,n){e._ComponentTypes.splice(n,1);var i=o(t),r=s(t),a=e._components[r];delete e._components[r],this.componentsManager._componentPool[i].release(a),this.world.componentsManager.componentRemovedFromEntity(t)}entityRemoveAllComponents(e,t){let n=e._ComponentTypes;for(let s=n.length-1;s>=0;s--)n[s].__proto__!==l&&this.entityRemoveComponent(e,n[s],t)}removeEntity(e,t){var n=this._entities.indexOf(e);if(!~n)throw new Error("Tried to remove entity not in list");e.alive=!1,0===this.numStateComponents&&(this.eventDispatcher.dispatchEvent(y,e),this._queryManager.onEntityRemoved(e),!0===t?this._releaseEntity(e,n):this.entitiesToRemove.push(e)),this.entityRemoveAllComponents(e,t)}_releaseEntity(e,t){this._entities.splice(t,1),e._world=null,this._entityPool.release(e)}removeAllEntities(){for(var e=this._entities.length-1;e>=0;e--)this.removeEntity(this._entities[e])}processDeferredRemoval(){for(let e=0;e<this.entitiesToRemove.length;e++){let t=this.entitiesToRemove[e],n=this._entities.indexOf(t);this._releaseEntity(t,n)}this.entitiesToRemove.length=0;for(let i=0;i<this.entitiesWithComponentsToRemove.length;i++){let r=this.entitiesWithComponentsToRemove[i];for(;r._ComponentTypesToRemove.length>0;){let i=r._ComponentTypesToRemove.pop();var e=o(i),t=s(i),n=r._componentsToRemove[t];delete r._componentsToRemove[t],this.componentsManager._componentPool[e].release(n)}}this.entitiesWithComponentsToRemove.length=0}queryComponents(e){return this._queryManager.getQuery(e)}count(){return this._entities.length}stats(){var e={numEntities:this._entities.length,numQueries:Object.keys(this._queryManager._queries).length,queries:this._queryManager.stats(),numComponentPool:Object.keys(this.componentsManager._componentPool).length,componentPool:{},eventDispatcher:this.eventDispatcher.stats};for(var t in this.componentsManager._componentPool){var n=this.componentsManager._componentPool[t];e.componentPool[t]={used:n.totalUsed(),size:n.count}}return e}}const u="EntityManager#ENTITY_CREATE",y="EntityManager#ENTITY_REMOVED",d="EntityManager#COMPONENT_ADDED",v="EntityManager#COMPONENT_REMOVE";class f{constructor(e){this.count=0,this.used=0,this.T=e}aquire(){return this.used++,this.count++,new this.T}release(){this.used--}totalSize(){return this.count}totalFree(){return 1/0}totalUsed(){return this.used}}class _{constructor(){this.Components={},this._componentPool={},this.numComponents={}}registerComponent(e){this.Components[e.name]=e,this.numComponents[e.name]=0}componentAddedToEntity(e){this.numComponents[e.name]?this.numComponents[e.name]++:this.numComponents[e.name]=1}componentRemovedFromEntity(e){this.numComponents[e.name]--}getComponentsPool(e){var t=o(e);return this._componentPool[t]||(e.prototype.reset?this._componentPool[t]=new p(e):(console.warn(`Component '${e.name}' won't benefit from pooling because 'reset' method was not implemeneted.`),this._componentPool[t]=new f(e))),this._componentPool[t]}}function C(e){var t=["create","reset","clear"].filter(t=>!e[t]);if(t.length>0)throw new Error(`createType expect type definition to implements the following functions: ${t.join(", ")}`);return e.isType=!0,e}var g={};g.Number=C({baseType:Number,isSimpleType:!0,create:e=>void 0!==e?e:0,reset:(e,t,n)=>{e[t]=void 0!==n?n:0},clear:(e,t)=>{e[t]=0}}),g.Boolean=C({baseType:Boolean,isSimpleType:!0,create:e=>void 0!==e&&e,reset:(e,t,n)=>{e[t]=void 0!==n&&n},clear:(e,t)=>{e[t]=!1}}),g.String=C({baseType:String,isSimpleType:!0,create:e=>void 0!==e?e:"",reset:(e,t,n)=>{e[t]=void 0!==n?n:""},clear:(e,t)=>{e[t]=""}}),g.Array=C({baseType:Array,create:e=>void 0!==e?e.slice():[],reset:(e,t,n)=>{void 0!==n?e[t]=n.slice():e[t].length=0},clear:(e,t)=>{e[t].length=0},copy:(e,t,n)=>{e[n]=t[n].slice()}});var E={number:g.Number,boolean:g.Boolean,string:g.String};function T(e){return Array.isArray(e)?g.Array:E[typeof e]?E[typeof e]:null}e.Component=class{},e.Not=function(e){return{operator:"not",Component:e}},e.System=class{canExecute(){if(0===this._mandatoryQueries.length)return!0;for(let e=0;e<this._mandatoryQueries.length;e++){if(0===this._mandatoryQueries[e].entities.length)return!1}return!0}constructor(e,t){if(this.world=e,this.enabled=!0,this._queries={},this.queries={},this.priority=0,this.executeTime=0,t&&t.priority&&(this.priority=t.priority),this._mandatoryQueries=[],this.initialized=!0,this.constructor.queries)for(var n in this.constructor.queries){var s=this.constructor.queries[n],o=s.components;if(!o||0===o.length)throw new Error("'components' attribute can't be empty in a query");var i=this.world.entityManager.queryComponents(o);this._queries[n]=i,!0===s.mandatory&&this._mandatoryQueries.push(i),this.queries[n]={results:i.entities};const e={added:r.prototype.ENTITY_ADDED,removed:r.prototype.ENTITY_REMOVED,changed:r.prototype.COMPONENT_CHANGED};s.listen&&["added","removed","changed"].forEach(t=>{if(s.listen[t]){let o=s.listen[t];if("changed"===t){if(i.reactive=!0,!0===o){let e=this.queries[n][t]=[];i.eventDispatcher.addEventListener(r.prototype.COMPONENT_CHANGED,t=>{-1===e.indexOf(t)&&e.push(t)})}else if(Array.isArray(o)){let e=this.queries[n][t]=[];i.eventDispatcher.addEventListener(r.prototype.COMPONENT_CHANGED,(t,n)=>{-1!==o.indexOf(n.constructor)&&-1===e.indexOf(t)&&e.push(t)})}}else{let s=this.queries[n][t]=[];i.eventDispatcher.addEventListener(e[t],e=>{-1===s.indexOf(e)&&s.push(e)})}}})}}stop(){this.enabled=!1}play(){this.enabled=!0}clearEvents(){for(let t in this.queries){var e=this.queries[t];if(e.added&&(e.added.length=0),e.removed&&(e.removed.length=0),e.changed)if(Array.isArray(e.changed))e.changed.length=0;else for(let t in e.changed)e.changed[t].length=0}}toJSON(){return{name:this.constructor.name,enabled:this.enabled,executeTime:this.executeTime,priority:this.priority,queries:{}}}},e.SystemStateComponent=l,e.TagComponent=class{reset(){}},e.Types=g,e.World=class{constructor(){if(this.componentsManager=new _(this),this.entityManager=new c(this),this.systemManager=new t(this),this.enabled=!0,this.eventQueues={},"undefined"!=typeof CustomEvent){var e=new CustomEvent("ecsy-world-created",{detail:this});window.dispatchEvent(e)}}registerComponent(e){return this.componentsManager.registerComponent(e),this}registerSystem(e,t){return this.systemManager.registerSystem(e,t),this}getSystem(e){return this.systemManager.getSystem(e)}getSystems(){return this.systemManager.getSystems()}execute(e,t){this.enabled&&(this.systemManager.execute(e,t),this.entityManager.processDeferredRemoval())}stop(){this.enabled=!1}play(){this.enabled=!0}createEntity(){return this.entityManager.createEntity()}stats(){var e={entities:this.entityManager.stats(),system:this.systemManager.stats()};console.log(JSON.stringify(e,null,2))}},e.createComponentClass=function(e,t){for(let t in e){e[t].type||(e[t].type=T(e[t].default))}var n=function(){for(let n in e){var t=e[n];let s=t.type;s&&s.isType?this[n]=s.create(t.default):this[n]=t.default}};void 0!==t&&Object.defineProperty(n,"name",{value:t}),n.prototype.schema=e;var s=!0;for(let t in e){var o=e[t];o.type||(o.type=T(o.default)),o.type||(console.warn(`Unknown type definition for attribute '${t}'`),s=!1)}if(s){n.prototype.copy=function(t){for(let n in e)if(t[n]){let s=e[n].type;s.isSimpleType?this[n]=t[n]:s.copy?s.copy(this,t,n):console.warn(`Unknown copy function for attribute '${n}' data type`)}},n.prototype.reset=function(){for(let t in e){let n=e[t],s=n.type;s.reset&&s.reset(this,t,n.default)}},n.prototype.clear=function(){for(let t in e){let n=e[t].type;n.clear&&n.clear(this,t)}};for(let t in e){let s=e[t],o=s.type;n.prototype[t]=s.default,o.reset&&o.reset(n.prototype,t,s.default)}}else for(var i in console.warn("This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'"),e){let t=e[i];n.prototype[i]=t.default}return n},e.createType=C,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
